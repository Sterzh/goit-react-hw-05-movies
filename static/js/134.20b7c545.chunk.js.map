{"version":3,"file":"static/js/134.20b7c545.chunk.js","mappings":"iOA4EA,UAnEe,WAAO,IAAD,EACbA,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAK,UAAGP,EAAaQ,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WAER,GADAL,EAAUG,GACK,KAAXJ,EAAe,CAAC,IAEHO,EAFE,mCAEjB,+GAE2BC,EAAAA,EAAAA,IAAA,UAjBhB,iCAiBgB,OAhBf,gBAgBe,OAfd,4CAec,kBACyBR,IAHpD,cAEUO,EAFV,gBAM8BA,EAASE,KAAKC,QAAQC,KAAI,SAAAC,GAClD,MAAO,CACLC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MAEZ,IAXL,OAMUZ,EANV,OAYIC,EAAeD,GAZnB,kDAcIa,QAAQC,IAAR,MAdJ,0DAFiB,qDACjBT,GAkBD,CAEF,GAAE,CAACP,IASJ,OACE,iBACEiB,MAAO,CACLC,WAAY,GACZC,cAAe,IAHnB,WAME,kBAAOC,KAAK,OAAOC,MAAOjB,EAAOkB,SAdX,SAAAV,GACxB,GAAuB,KAAnBA,EAAEW,OAAOF,MACX,OAAOvB,EAAgB,CAAEM,MAAOQ,EAAEW,OAAOF,QAE3CvB,EAAgB,CAAC,EAClB,KAUG,mBAAQ0B,QAAS,kBAAMvB,EAAUG,EAAhB,EAAjB,oBACiB,KAAhBF,IACC,wBACGA,EAAYS,KAAI,SAAAC,GACf,OACE,SAAC,KAAD,CAEEa,GAAE,UAAKb,EAAEC,IACTa,MAAO,CAAEC,KAAMjC,GACfkC,UAAU,aAJZ,UAME,eAAIA,UAAU,aAAd,SAA4BhB,EAAEE,SALzBF,EAAEC,GAQZ,QAKV,C","sources":["pages/Movies.jsx"],"sourcesContent":["import { useLocation, useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst GET_VALUE = 'search/movie';\nconst MY_API_KEY = '?api_key=c511c78146d5adcdbcb48d13d0273853';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState('');\n  const [foundMovies, setFoundMovies] = useState('');\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    setSearch(query);\n    if (search !== '') {\n      response();\n      async function response() {\n        try {\n          const response = await axios.get(\n            `${BASE_URL}${GET_VALUE}${MY_API_KEY}&query=${search}`\n          );\n\n          const foundMovies = await response.data.results.map(e => {\n            return {\n              id: e.id,\n              title: e.title,\n            };\n          });\n          setFoundMovies(foundMovies);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]);\n\n  const updateQueryString = e => {\n    if (e.target.value !== '') {\n      return setSearchParams({ query: e.target.value });\n    }\n    setSearchParams({});\n  };\n\n  return (\n    <div\n      style={{\n        paddingTop: 15,\n        paddingBottom: 15,\n      }}\n    >\n      <input type=\"text\" value={query} onChange={updateQueryString} />\n      <button onClick={() => setSearch(query)}>Search</button>\n      {foundMovies !== '' && (\n        <ul>\n          {foundMovies.map(e => {\n            return (\n              <Link\n                key={e.id}\n                to={`${e.id}`}\n                state={{ from: location }}\n                className=\"moviesLink\"\n              >\n                <li className=\"moviesList\">{e.title}</li>\n              </Link>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["location","useLocation","useSearchParams","searchParams","setSearchParams","useState","search","setSearch","foundMovies","setFoundMovies","query","get","useEffect","response","axios","data","results","map","e","id","title","console","log","style","paddingTop","paddingBottom","type","value","onChange","target","onClick","to","state","from","className"],"sourceRoot":""}